									***    int n = sizeof(arr)/sizeof(arr[0]);	***


This line of code is used to calculate the number of elements in an array called arr and store it in an integer variable n.

The expression sizeof(arr) returns the total number of bytes occupied by the entire array, which includes all of its elements and any padding that may be added by the compiler.

However, since we want to know the number of elements in the array, we divide the total size of the array by the size of one element. This is achieved by using the expression sizeof(arr[0]), which returns the number of bytes occupied by the first element in the array.

Thus, the value of sizeof(arr)/sizeof(arr[0]) gives us the number of elements in the array arr and stores it in the integer variable n.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

									*** 

									for (i = 0; i < n-1; i++) {
									    for (j = 0; j < n-i-1; j++) {
									      if (arr[j] > arr[j+1]) {
										temp = arr[j];
										arr[j] = arr[j+1];
										arr[j+1] = temp;
									      }
									    }
									  }

									***

The code uses a nested for loop structure to compare adjacent pairs of elements in the array and swap them if they are not in the correct order. The outer loop controls the number of passes that are made over the array, while the inner loop iterates over the unsorted portion of the array.

Here is an explanation of the code:

for (i = 0; i < n-1; i++): This line sets up the outer loop, which runs n-1 times over the array. n is the length of the array. Each pass over the array compares and potentially swaps adjacent elements that are out of order. After each pass, the last element in the array is guaranteed to be in its correct sorted position.
for (j = 0; j < n-i-1; j++): This line sets up the inner loop, which runs over the unsorted portion of the array for each pass of the outer loop. The -i part of n-i-1 is used to exclude the already sorted elements at the end of the array from the comparisons.
if (arr[j] > arr[j+1]): This line checks if the current element in the inner loop is greater than the adjacent element to the right of it. If it is, the elements are out of order and need to be swapped.
temp = arr[j]; arr[j] = arr[j+1]; arr[j+1] = temp;: This code swaps the elements if they are out of order. It stores the current element in a temporary variable temp, then replaces it with the adjacent element to the right. Finally, it replaces the adjacent element with temp, effectively swapping their positions.
After the outer loop completes all n-1 passes over the array, the array will be sorted in ascending order.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
